-- SOURCE DATA
CREATE TABLE public.sales
(
    transaction_id integer,
    transactional_date timestamp,
    product_id character varying,
    customer_id integer,
    payment character varying,
    credit_card bigint,
    loyalty_card character varying,
    cost character varying,
    quantity integer,
    price numeric,
    PRIMARY KEY (transaction_id)
);

SELECT * FROM public.sales;

-- Setting up sales fact table for staging

CREATE TABLE "Staging".sales
(
    transaction_id integer,
	transactional_date timestamp,
	product_id character varying,
    customer_id integer,
    payment character varying,
    credit_card bigint,
    loyalty_card character varying,
    cost numeric,
    quantity integer,
    price numeric,
    PRIMARY KEY (transaction_id)
);

SELECT * FROM "Staging".sales;

-- Setting up sales fact table for core

CREATE TABLE core_layer.sales
(
    transaction_id integer,
	transactional_date timestamp,
	transactional_date_fk bigint,
	product_id character varying,
	product_fk integer,
    customer_id integer,
    payment_fk integer,
    credit_card bigint,
    cost numeric,
    quantity integer,
    price numeric,
	total_cost numeric,
	total_price numeric,
	profit numeric,  
    PRIMARY KEY (transaction_id)
);

SELECT * FROM core_layer.sales;

-- Setting up sales payment tables for staging and core

CREATE TABLE core_layer.dim_payment
(
    payment_pk integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 ),
    payment character varying,
    loyalty_card character varying,
    PRIMARY KEY (payment_pk)
);

SELECT * FROM core_layer.dim_payment;

-- Dim table script

SELECT
	DISTINCT CASE WHEN payment IS NULL THEN 'Cash' ELSE payment END payment,
	--COALESCE(payment, 'Cash') payment,
	loyalty_card
FROM "Staging".sales;

-- Sales Fact transformation from Staging layer

SELECT 
	transaction_id,
	transactional_date,
	EXTRACT(YEAR FROM transactional_date) * 10000 + EXTRACT(MONTH FROM transactional_date) * 100 + EXTRACT(DAY FROM transactional_date) transactional_date_fk,
	ss.product_id,
	dp.product_pk product_fk,
    ss.customer_id,
    dpy.payment_pk payment_fk,
    ss.credit_card,
    ss.cost,
    ss.quantity,
    ss.price,
	(ss.quantity * ss.cost) total_cost,
	(ss.quantity * ss.price) total_price,
	(ss.quantity * ss.price) - (ss.quantity - ss.cost) profit  
FROM "Staging".sales ss
LEFT JOIN core_layer.dim_product dp
	ON ss.product_id = dp.product_id
LEFT JOIN core_layer.dim_payment dpy
	ON COALESCE(ss.payment, 'cash') = dpy.payment and ss.loyalty_card = dpy.loyalty_card;


SELECT * FROM core_layer.dim_payment;
SELECT * FROM public.sales;


TRUNCATE public.sales;
